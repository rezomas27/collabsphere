{"ast":null,"code":"var _jsxFileName = \"/Users/sammozer/Desktop/collabsphere/collabsphere-frontend/src/Posts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Posts = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/posts', {\n          withCredentials: true\n        });\n        setPosts(response.data); // Assuming the API returns an array of posts\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n        setError('Failed to load posts.');\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: post.title || 'Untitled Post'\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Posts, \"FFSFm1bVdM1s2gLh8ffGbsIvlRY=\");\n_c = Posts;\nexport default Posts;\nvar _c;\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Posts","_s","posts","setPosts","loading","setLoading","error","setError","fetchPosts","response","get","withCredentials","data","err","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","post","title","_id","_c","$RefreshReg$"],"sources":["/Users/sammozer/Desktop/collabsphere/collabsphere-frontend/src/Posts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/posts', {\n          withCredentials: true,\n        });\n        setPosts(response.data); // Assuming the API returns an array of posts\n        setLoading(false);\n      } catch (err) {\n        console.log(err);\n        setError('Failed to load posts.');\n        setLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>{error}</div>;\n  }\n\n  return (\n    <div>\n      <h1>Posts</h1>\n      {posts.length === 0 ? (\n        <p>No posts found.</p>\n      ) : (\n        <ul>\n          {posts.map((post) => (\n            <li key={post._id}>\n              {post.title || 'Untitled Post'}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Posts;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMY,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,iCAAiC,EAAE;UAClEC,eAAe,EAAE;QACnB,CAAC,CAAC;QACFR,QAAQ,CAACM,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;QACzBP,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOQ,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;QAChBN,QAAQ,CAAC,uBAAuB,CAAC;QACjCF,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAiB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAId,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAiB,QAAA,EAAMV;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC3B;EAEA,oBACErB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACblB,KAAK,CAACmB,MAAM,KAAK,CAAC,gBACjBtB,OAAA;MAAAiB,QAAA,EAAG;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAEtBrB,OAAA;MAAAiB,QAAA,EACGd,KAAK,CAACoB,GAAG,CAAEC,IAAI,iBACdxB,OAAA;QAAAiB,QAAA,EACGO,IAAI,CAACC,KAAK,IAAI;MAAe,GADvBD,IAAI,CAACE,GAAG;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACnB,EAAA,CA/CID,KAAK;AAAA0B,EAAA,GAAL1B,KAAK;AAiDX,eAAeA,KAAK;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}