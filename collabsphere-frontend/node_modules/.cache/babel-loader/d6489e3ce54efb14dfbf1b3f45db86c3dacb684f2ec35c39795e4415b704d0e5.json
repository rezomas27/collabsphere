{"ast":null,"code":"var _s = $RefreshSig$();\n// hooks/useAuth.js\nimport { useState, useEffect } from 'react';\nexport const useAuth = () => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    // Check for token in cookies\n    const cookies = document.cookie.split(';');\n    const hasToken = cookies.some(cookie => cookie.trim().startsWith('token='));\n    setIsLoggedIn(hasToken);\n  }, []);\n  return isLoggedIn;\n};\n_s(useAuth, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");","map":{"version":3,"names":["useState","useEffect","useAuth","_s","isLoggedIn","setIsLoggedIn","cookies","document","cookie","split","hasToken","some","trim","startsWith"],"sources":["/Users/sammozer/Desktop/collabsphere/collabsphere-frontend/src/hooks/useAuth.js"],"sourcesContent":["// hooks/useAuth.js\nimport { useState, useEffect } from 'react';\n\nexport const useAuth = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    // Check for token in cookies\n    const cookies = document.cookie.split(';');\n    const hasToken = cookies.some(cookie => \n      cookie.trim().startsWith('token=')\n    );\n    setIsLoggedIn(hasToken);\n  }, []);\n\n  return isLoggedIn;\n};"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd;IACA,MAAMK,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;IAC1C,MAAMC,QAAQ,GAAGJ,OAAO,CAACK,IAAI,CAACH,MAAM,IAClCA,MAAM,CAACI,IAAI,CAAC,CAAC,CAACC,UAAU,CAAC,QAAQ,CACnC,CAAC;IACDR,aAAa,CAACK,QAAQ,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAON,UAAU;AACnB,CAAC;AAACD,EAAA,CAbWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}